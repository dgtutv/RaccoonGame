package CollectableObject;

import main.RaccoonGame;
import object.GeneralCollectableObject;
import object.GeneralObject;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Objects;
import java.util.Random;

/**
 * A pretty (randomly generated) raccoon lady.
 */
public class RedRaccoon extends GeneralCollectableObject {

    private BufferedImage objectImage2;
    private int timer;
    private Random randomNumGenerator;
    private int row, col, spawnBlock;

    public RedRaccoon() {
        objectName = "RedRaccoon";
        try {
            Image = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("/items/raccoon_red_dress.png")));
            objectImage2 = ImageIO.read(Objects.requireNonNull(getClass().getResourceAsStream("/items/raccoon_red_dress_flash.png")));
        }
        catch(IOException e) {
            e.printStackTrace();
        }
        collidable = false;
        timer = 0;
        randomNumGenerator = new Random();
    }

    /**
     * Overridden drawObject() method specialized for the RedRaccoon object, calls submethods depending on the value
     * of RedRaccoon's timer attribute to generate a random spawn location, spawn the raccoon, and remove the raccoon
     * from the map after a specified amount of time.
     * @param graphics: Graphics2D object used the draw the image to the screen
     * @param raccoonGame: main instance of the game, needed to access map size and dimension information
     */
    @Override
    public void drawObject(Graphics2D graphics, RaccoonGame raccoonGame) {
        //increment timer if gameState is playState
        if(raccoonGame.gameState == raccoonGame.playState) {
            timer++;
        }
        //after raccoon has been invisible for 10 seconds, spawn at a random location
        if(timer == 60*10) {
            generateSpawnLocation(graphics, raccoonGame);
        }
        if(timer > 60*10) {
            spawnRedRaccoon(graphics, raccoonGame);
        }
        //after racoon has been visible for 5 seconds, remove
        if(timer > 60*15) {
            removeRedRaccoon();
        }
    }

    /**
     * Generates a random spawn location on the map for the RedRaccoon object to be placed and drawn at. Randomly
     * selects a location until a location that is non-collidable is chosen.
     * @param graphics: Graphics2D object used the draw the image to the screen
     * @param raccoonGame: main instance of the game, needed to access map size and dimension information
     */
    public void generateSpawnLocation(Graphics2D graphics, RaccoonGame raccoonGame) {
        do {
            row = randomNumGenerator.nextInt(raccoonGame.windowCol);
            col = randomNumGenerator.nextInt(raccoonGame.windowRow);
            spawnBlock = raccoonGame.mapManager.mapBlockArr[row][col];
        }
        while(raccoonGame.mapManager.blocks[spawnBlock].collidable);
        this.x = row*raccoonGame.blockSize;
        this.y = col*raccoonGame.blockSize;
        this.collidableArea.width = raccoonGame.blockSize;
        this.collidableArea.height = raccoonGame.blockSize;
        //play red raccoon spawn sound
        raccoonGame.sound.effect(3, raccoonGame.sound);
    }

    /**
     * Draws the RedRaccoon object at the location generated by generateSpawnLocation() method. Flips between two
     * images in order to make a flashing effect on the RedRaccoon's heart earpiece.
     * @param graphics: Graphics2D object used the draw the image to the screen
     * @param raccoonGame: main instance of the game, needed to access map size and dimension information
     */
    public void spawnRedRaccoon(Graphics2D graphics, RaccoonGame raccoonGame) {
        //flip between drawing regular and "flash" red raccoon every 5/6 ths of a second
        if(timer%100 > 0 && timer%100 < 50) {
            graphics.drawImage(Image, this.x, this.y, raccoonGame.blockSize, raccoonGame.blockSize, null);
        }
        else {
            graphics.drawImage(objectImage2, this.x, this.y, raccoonGame.blockSize, raccoonGame.blockSize, null);
        }

    }

    /**
     * Removes the RedRaccoon object from the map by setting the timer to 0, also sets the collidableArea of the
     * RedRaccoon to 0x0 so that the object can no longer be collected while it is invisible.
     */
    public void removeRedRaccoon() {
        timer = 0;
        //set collidable area to zero so that you cannot pickup the raccoon when it is invisible
        this.collidableArea.width = 0;
        this.collidableArea.height = 0;
    }


}
